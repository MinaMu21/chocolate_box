{"version":3,"sources":["actions/index.js","containers/Chocolate.jsx","components/ChocolateList.jsx","containers/ChocolateBox.jsx","App.js","reducers/box.js","reducers/index.js","serviceWorker.js","index.js"],"names":["addChocolate","name","type","clearBox","connect","dispatch","bindActionCreators","props","react_default","a","createElement","className","onClick","ChocolatesList","importedChocolates","map","chocolate","src_containers_Chocolate","key","id","state","box","chocolateBoxes","Array","from","length","console","log","index","Object","defineProperty","eatOne","App","components_ChocolateList","src_containers_ChocolateBox","Component","initialState","arguments","undefined","action","indexOf","toConsumableArray","concat","splice","allReducers","combineReducers","Boolean","window","location","hostname","match","store","createStore","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gkBAEaA,EAAe,SAACC,GAAD,MAAW,CAC/BC,KAAM,gBACND,SAIKE,EAAW,iBAAO,CACvBD,KAAM,cCmBCE,qBAAQ,KANX,SAAAC,GACR,OAAOC,YAAoB,CACvBN,gBACDK,IAGQD,CApBG,SAAAG,GACd,OACIC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBACVH,EAAAC,EAAAC,cAAA,SAAIH,EAAMN,MACVO,EAAAC,EAAAC,cAAA,UACIE,QAAS,WACPL,EAAMP,aAAaO,EAAMN,QAF/B,SCcGY,SAjBQ,SAAAN,GACnB,OACIC,EAAAC,EAAAC,cAAA,WAASC,UAAU,2BACfH,EAAAC,EAAAC,cAAA,wBAEAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBACTG,EAAmBC,IAAI,SAAAC,GAAS,OAC7BR,EAAAC,EAAAC,cAACO,EAAD,CACIC,IAAKF,EAAUG,GACflB,KAAMe,EAAUf,qBCwBzBG,qBARF,SAAAgB,GAAK,MAAK,CACnBC,IAAKD,EAAMC,MAGF,SAAChB,GACV,OAAOC,YAAmB,CAACH,YAAWE,IAG3BD,CAlCM,SAAAG,GAEjB,IAAMe,EAAiBC,MAAMC,KAAK,CAAEC,OAAQ,KAG5C,OAFAC,QAAQC,IAAI,cAAepB,EAAMc,KAG7Bb,EAAAC,EAAAC,cAAA,WAASC,UAAU,yBACfH,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,UACIE,QAAU,kBAAKL,EAAMJ,YAAYQ,UAAU,aAD/C,iBAMAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACVW,EAAeP,IAAI,SAACM,EAAKO,GAAN,OAChBpB,EAAAC,EAAAC,cAAA,MAAAmB,OAAAC,EAAA,EAAAD,CAAA,CAAKjB,QAAS,kBAAML,EAAMwB,OAAOH,IAAQV,IAAKU,EAAOA,MAAOA,EACxDjB,UAAWJ,EAAMc,IAAIO,GAAS,oBAAsBrB,EAAMc,IAAIO,GAAS,oBAD3E,MAESA,WCRdI,mLATX,OACExB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACuB,EAAD,MACAzB,EAAAC,EAAAC,cAACwB,EAAD,cALUC,oBCLZC,EAAe,GAsBNf,EApBH,WAAkC,IAAjCD,EAAiCiB,UAAAZ,OAAA,QAAAa,IAAAD,UAAA,GAAAA,UAAA,GAAzBD,EAAcG,EAAWF,UAAAZ,OAAA,EAAAY,UAAA,QAAAC,EAC1C,OAAQC,EAAOrC,MACX,IAAK,gBAML,OALGkB,EAAMoB,QAAQ,OAAS,EACxBpB,EAAMA,EAAMoB,QAAQ,OAASD,EAAOtC,KAEpCmB,EAAKS,OAAAY,EAAA,EAAAZ,CAAQT,GAARsB,OAAA,CAAeH,EAAOtC,OAEtB4B,OAAAY,EAAA,EAAAZ,CAAIT,GAEb,IAAK,UAEH,OADAA,EAAMuB,OAAOJ,EAAOX,MAAM,EAAG,MACtBC,OAAAY,EAAA,EAAAZ,CAAKT,GAEd,IAAK,YACH,OAAOgB,EACT,QACE,OAAOhB,ICbAwB,EAJKC,YAAiB,CACjCxB,QCOgByB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCJN,IAAMC,EAAQC,YAAYR,GAE1BS,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,CAAUJ,MAAQA,GAAO3C,EAAAC,EAAAC,cAAC8C,EAAD,OAAoBC,SAASC,eAAe,SDiH/E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.dda0fae7.chunk.js","sourcesContent":["//Action\n///Ajout chocolats dans la boite!\nexport const addChocolate = (name) => ({\n        type: 'ADD_CHOCOLATE',\n        name,\n})\n\n///Mange toute la boite\nexport const clearBox = () => ({\n        type: 'CLEAR_BOX',\n});\n\n///Mange 1 chocolat\nexport const eatOne = (index) => ({\n        type: 'EAT_ONE',\n        index\n      });","// Création containers car à besoin de Store\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { addChocolate } from '../actions';\nimport './Chocolate.css';\n\nconst Chocolate = props => {\n    return (\n        <li className='chocolate-item'>\n            <p>{props.name}</p>\n            <button\n                onClick={() => {\n                  props.addChocolate(props.name);\n                }}\n            >+</button>\n\n        </li>\n    );\n};\n\nconst mdtp= dispatch =>{\n    return bindActionCreators ({\n        addChocolate,\n    }, dispatch)\n}\n \nexport default connect(null, mdtp)(Chocolate);","// Component n'accède pas au store\n\nimport React from 'react';\n\nimport importedChocolates from '../chocolate.json';\nimport Chocolate from '../containers/Chocolate';\n\nimport './ChocolateList.css';\n\nconst ChocolatesList = props => {\n    return (\n        <section className='chocolates-list-section'>\n            <h2>Chocolates</h2>\n\n            <ul className='chocolates-list'>\n                {importedChocolates.map(chocolate => (\n                    <Chocolate\n                        key={chocolate.id}\n                        name={chocolate.name}\n                    />\n                ))}\n            </ul>\n        </section>\n    );\n};\n\nexport default ChocolatesList;","// Création containers car à besoin de Store\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { clearBox, eatOne } from '../actions';\nimport './ChocolateBox.css';\n\nconst ChocolateBox = props => {\n    // construction d'un tableau vide de 12 cellules\n    const chocolateBoxes = Array.from({ length: 12 });\n    console.log('state choco', props.box);\n\n    return (\n        <section className='chocolate-box-section'>\n            <h2>Chocolate Box!</h2>\n            <button\n                onClick= {() =>props.clearBox()} className=\"clear-btn\"\n                \n            >Eat the box!!</button>\n            \n\n            <div className='chocolate-box'>\n                {chocolateBoxes.map((box, index) => (\n                    <div onClick={() => props.eatOne(index)} key={index} index={index}\n                        className={props.box[index] ? 'chocolate-on-box ' + props.box[index] : 'chocolate-on-box'}\n                        key={index}\n                    ></div>\n                ))}\n            </div>\n        </section>\n    );\n};\n// Distribution du state\nconst mstp = state => ({\n    box: state.box,\n})\n// Distribution de l'action\nconst mdtp = (dispatch) => {\n    return bindActionCreators({clearBox}, dispatch);\n}\n\nexport default connect(mstp, mdtp)(ChocolateBox);","import React, { Component } from 'react';\n\nimport './App.css';\n\nimport ChocolateList from './components/ChocolateList';\nimport ChocolateBox from './containers/ChocolateBox';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <ChocolateList />\n        <ChocolateBox />\n      </div>\n    );\n  }\n}\n\nexport default App;","//Reducer\n//Initialisation state debut = tableau vide\nconst initialState = [];\n\nconst box = (state = initialState, action) => {\n    switch (action.type) {\n        case 'ADD_CHOCOLATE' :\n        if(state.indexOf(null) >= 0) {\n          state[state.indexOf(null)] = action.name;\n        } else {\n          state = [ ...state, action.name];\n        }\n        return [...state];\n  \n      case 'EAT_ONE' :\n        state.splice(action.index,1, null);\n        return [ ...state];\n  \n      case 'CLEAR_BOX' :\n        return initialState;\n      default :\n        return state; \n    }\n  };\nexport default box;","// Permet de combiner les reducers\nimport { combineReducers } from 'redux';\n// Import du reducer box\nimport box from './box';\nconst allReducers = combineReducers ({\n    box,\n})\n\nexport default allReducers;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// importe le provider super composant qui vient donner le store aux containers\n\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\n \nimport './index.css';\nimport App from './App';\n// import tous les reducers\nimport allReducers from './reducers'\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(allReducers);\n\nReactDOM.render(<Provider store ={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}